'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('preact'),
    h = _require.h,
    Component = _require.Component;

var Waypoint = function (_Component) {
    _inherits(Waypoint, _Component);

    function Waypoint() {
        _classCallCheck(this, Waypoint);

        return _possibleConstructorReturn(this, (Waypoint.__proto__ || Object.getPrototypeOf(Waypoint)).apply(this, arguments));
    }

    _createClass(Waypoint, [{
        key: 'isInside',
        value: function isInside() {
            var waypointTop = this.base.getBoundingClientRect().top;

            // grab this.props.container's height
            var contextHeight = this.container !== window ? this.container.offsetHeight : window.innerHeight;

            // grab this.props.container's scrollTop (window is always 0)
            var contextScrollTop = this.container !== window ? this.container.getBoundingClientRect().top : 0;

            // if waypoint is in between container's top and bottom edges
            // return true, false if above top or below bottom
            return contextScrollTop <= waypointTop && waypointTop <= contextScrollTop + contextHeight;
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll(event) {
            var current = this.isInside();
            var prev = this._prev || false;
            this._prev = current;

            // don't fire if previous call was the same
            if (prev === current) return;

            // default callbacks
            var _props = this.props,
                _props$onEnter = _props.onEnter,
                onEnter = _props$onEnter === undefined ? function () {} : _props$onEnter,
                _props$onLeave = _props.onLeave,
                onLeave = _props$onLeave === undefined ? function () {} : _props$onLeave;

            if (current) onEnter(event);
            if (prev) onLeave(event);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.container = this.props.container || window;

            // bind before adding as a listener so we can remove later
            this.boundScroller = this.handleScroll.bind(this);
            this.container.addEventListener('scroll', this.boundScroller);

            // possibly call onEnter when mounting if waypoint is visible
            this.handleScroll(null);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.container.removeEventListener('scroll', this.boundScroller);
        }
    }, {
        key: 'render',
        value: function render(_ref) {
            var children = _ref.children;

            return children.length ? children[0] : h('span');
        }
    }]);

    return Waypoint;
}(Component);

module.exports = Waypoint;

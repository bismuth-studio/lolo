var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @function config
 * @instance instance
 * @prop {String} className - The default className's for your PIMG(s)
 * @prop {String} placeholderClassName - The default placeholder className's for your image(s)
 * @prop {Function} onError - Determines how errors are handled in the component
 * @prop {Boolean | Object} dataSaver - Choose to use dataSaver mode
 * @prop {String} dataSaver.wrapperClassName - DataSaver wrapper className
 * @prop {String} dataSaver.buttonClassName - DataSaver button className
 */

var config = function () {
	var instance = void 0;

	var init = function init() {
		var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    _ref$buttonClassName = _ref.buttonClassName,
		    buttonClassName = _ref$buttonClassName === undefined ? 'pimg__btn' : _ref$buttonClassName,
		    _ref$className = _ref.className,
		    className = _ref$className === undefined ? 'pimg' : _ref$className,
		    _ref$dataSaver = _ref.dataSaver,
		    dataSaver = _ref$dataSaver === undefined ? false : _ref$dataSaver,
		    _ref$fetchOnDemand = _ref.fetchOnDemand,
		    fetchOnDemand = _ref$fetchOnDemand === undefined ? false : _ref$fetchOnDemand,
		    _ref$error = _ref.error,
		    error = _ref$error === undefined ? null : _ref$error,
		    _ref$placeholderClass = _ref.placeholderClassName,
		    placeholderClassName = _ref$placeholderClass === undefined ? 'pimg__placeholder' : _ref$placeholderClass,
		    _ref$wrapperClassName = _ref.wrapperClassName,
		    wrapperClassName = _ref$wrapperClassName === undefined ? 'pimg__wrapper' : _ref$wrapperClassName;

		if ((typeof dataSaver === 'undefined' ? 'undefined' : _typeof(dataSaver)) !== 'object' && dataSaver === true) {
			dataSaver = {
				wrapperClassName: wrapperClassName,
				buttonClassName: buttonClassName
			};
		} else if ((typeof dataSaver === 'undefined' ? 'undefined' : _typeof(dataSaver)) === 'object') {
			dataSaver = {
				wrapperClassName: dataSaver.wrapperClassName || wrapperClassName,
				buttonClassName: dataSaver.buttonClassName || buttonClassName
			};
		}

		return {
			onError: function onError(error) {
				error = error;
			},
			getClassName: function getClassName() {
				return className;
			},
			getButtonClassName: function getButtonClassName() {
				return buttonClassName;
			},
			getDataSaver: function getDataSaver() {
				return dataSaver;
			},
			getError: function getError(cb) {
				return cb(error);
			},
			getFetchOnDemand: function getFetchOnDemand() {
				return fetchOnDemand;
			},
			getPlaceholderClassName: function getPlaceholderClassName() {
				return placeholderClassName;
			},
			getWrapperClassName: function getWrapperClassName() {
				return wrapperClassName;
			}
		};
	};

	return function (params) {
		return instance ? instance : instance = init(params);
	};
}();

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script = {
	name: 'pimg',

	data: function data() {
		return {
			blob: null,
			buttonClassName: 'pimg__btn',
			className: 'pimg',
			classNamesCombined: 'pimg pimg__btn',
			dataSaverMode: false,
			delayed: false,
			loading: true,
			placeholderClassName: 'pimg__placeholder',
			placeholderData: null,
			wrapperClassName: 'pimg__wrapper'
		};
	},

	props: ['dataSaver', 'fetchOnDemand', 'placeholder', 'src'],

	methods: {
		delayFetchingImage: function delayFetchingImage(delayed) {
			this.delayed = delayed;
		},
		fetchImage: function fetchImage() {
			var _this = this;

			fetch(this.src).then(function (res) {
				return res.blob();
			}).then(function (res) {
				var blob = URL.createObjectURL(res);

				_this.blob = blob;
				_this.loading = false;
			});
		},
		_fetchOnDemand: function _fetchOnDemand(src) {
			var _this2 = this;

			try {
				var observer = new IntersectionObserver(function (entries) {
					var image = entries[0];

					if (image.isIntersecting) {
						_this2.fetchImage(_this2.src);
						_this2.delayFetchingImage(false);
						observer.disconnect();
					}
				});

				observer.observe(this.$refs.image);
			} catch (_) {
				// Fail gracefully
				console.warn('fetchOnDemand not supported on this browser', _);
				this.fetchImage(this.src);
				this.delayFetchingImage(false);
			}
		}
	},

	mounted: function mounted() {
		var _config = config(),
		    getButtonClassName = _config.getButtonClassName,
		    getClassName = _config.getClassName,
		    getDataSaver = _config.getDataSaver,
		    getFetchOnDemand = _config.getFetchOnDemand,
		    getPlaceholderClassName = _config.getPlaceholderClassName,
		    getWrapperClassName = _config.getWrapperClassName;

		this.buttonClassName = getButtonClassName();
		this.className = getClassName();
		this.dataSaverMode = typeof this.dataSaver !== 'undefined' || getDataSaver();
		this.placeholderClassName = getPlaceholderClassName();
		this.wrapperClassName = getWrapperClassName();
		this.classNamesCombined = this.className + ' ' + this.placeholderClassName;

		if (this.src && this.src.includes('cloudinary')) {
			this.placeholderData = this.placeholder || this.src.replace('/upload/', '/upload/c_thumb,w_30/');
		}

		if (typeof this.dataSaver !== 'undefined' || getDataSaver()) {
			this.delayFetchingImage(true);
		} else if (typeof this.fetchOnDemand !== 'undefined' || getFetchOnDemand()) {
			this.delayFetchingImage(true);
			this._fetchOnDemand(this.src);
		} else {
			this.fetchImage(this.src);
		}
	}
};

/* script */

var __vue_script__ = script;

/* template */
var __vue_render__ = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _vm.dataSaverMode ? _c("div", { class: _vm.wrapperClassName }, [_vm.loading ? _c("img", {
    ref: "image",
    class: _vm.classNamesCombined,
    attrs: { src: _vm.placeholder || _vm.placeholderData }
  }) : _c("img", { class: _vm.className, attrs: { src: _vm.blob } }), _vm._v(" "), _c("button", {
    class: _vm.buttonClassName,
    on: {
      click: function click($event) {
        _vm.fetchImage(_vm.src);
        _vm.dataSaverMode = false;
      }
    }
  }, [_vm._v("Load image")])]) : _c("div", [_vm.loading ? _c("img", {
    ref: "image",
    class: _vm.classNamesCombined,
    attrs: { src: _vm.placeholder || _vm.placeholderData }
  }) : _c("img", { class: _vm.className, attrs: { src: _vm.blob } })]);
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

/* style */
var __vue_inject_styles__ = undefined;
/* scoped */
var __vue_scope_id__ = undefined;
/* module identifier */
var __vue_module_identifier__ = undefined;
/* functional template */
var __vue_is_functional_template__ = false;
/* component normalizer */
function __vue_normalize__(template, style, script$$1, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
  var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

  // For security concerns, we use only base name in production mode.
  component.__file = "/home/ademola/workspace/pimg/src/vue/index.vue";

  if (!component.render) {
    component.render = template.render;
    component.staticRenderFns = template.staticRenderFns;
    component._compiled = true;

    if (functional) component.functional = true;
  }

  component._scopeId = scope;

  return component;
}
/* style inject */

/* style inject SSR */

var index = __vue_normalize__({ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, undefined, undefined);

export { config };
export default index;
//# sourceMappingURL=index.es.js.map
